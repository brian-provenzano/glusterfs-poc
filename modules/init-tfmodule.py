#!/usr/bin/python3

"""This simple script is used to initialize a new module's file skeleton
Give it the module name and it creates it in the current directory.
Makes it easy to setup new modules
BJP 7/21/17"""

import argparse
from pathlib import Path, PurePath

TERRAFORM_VERSION_SUPPORTED = "0.9"

def Main():
    """ Main()"""
    parser = argparse.ArgumentParser(prog='init-tfmodule')
    parser.add_argument("modulename", type=str, help="The name of " \
                        "the new terraform module to stub")
    parser.add_argument("-v", "--version", action='version', version='%(prog)s 1.0 (Initialize a new Hashicorp Terraform module)')
    args = parser.parse_args()
    moduleName = args.modulename.lstrip()

    try:
        CreateModule(moduleName)
    except FileExistsError as fe:
        print("This directory already exists! REASON: {0}".format(str(fe)))
    except OSError as oe:
        print("Error creating directory REASON: {0}".format(str(oe)))
    except Exception as e:
            print("Unknown error - REASON: {0}".format(e))


def CreateModule(module):
    """ Create the default terraform directory and files for a new module"""
    moduleDirectory = PurePath.joinpath(Path.cwd(),module)
    Path.mkdir(moduleDirectory)
    tfFiles = ["outputs.tf", "main.tf", "inputs.tf", "variables.tf", "README", "README.md"]
    borders = ("#" + ('-' * 80))
    for tfFile in tfFiles:
        with Path.open(PurePath.joinpath(moduleDirectory,tfFile),"w") as theFile:
            if tfFile == "inputs.tf":
                theFile.write("""{0}
{1}
{2}
""".format(borders, "# MODULE INPUTS (TF equiv of arguments, params, whatever)", borders))
                print("\tcreated inputs.tf...")
            elif tfFile == "main.tf":
                theFile.write("""terraform {{
  required_version = \"~>{0}\"
}}
{1}
{2}
{3}
""".format(TERRAFORM_VERSION_SUPPORTED, borders,"# {0}".format(module), borders))
                print("\tcreated main.tf...")
            elif tfFile == "variables.tf":
                theFile.write("""{0}
{1}
{2}
""".format(borders, "# LOCAL VARIABLES", borders))
                print("\tcreated variables.tf...")
            elif tfFile == "outputs.tf":
                theFile.write("""{0}
{1}
{2}
""".format(borders, "# MODULE OUTPUTS", borders))
                print("\tcreated outputs.tf...")
            elif tfFile == "README":
                theFile.write("""{0}
{1}
{2}
""".format(borders, "Module for {0}".format(module), borders))
                print("\tcreated README...")
            elif tfFile == "README.md":
                theFile.write("""{0}
{1}
>This is an autogenerated module stub.  Change me to something helpful!
""".format("## Module for {0}".format(module), "---"))
                print("\tcreated README.md...")

if __name__ == '__main__':
    Main()